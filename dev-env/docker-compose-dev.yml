services:
  dev_nginx:
    container_name: 'dev_nginx_proxy'
    image: nginx:stable
    ports:
      - '8000:80'
    networks:
      - dataverse
    depends_on:
      - dev_dataverse
      - dev_frontend
      - dev_keycloak
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./docker-dev-volumes/nginx/logs:/var/log/nginx/

  dev_frontend:
    container_name: 'dev_frontend'
    hostname: frontend
    build:
      context: ../
      dockerfile: ./dev.Dockerfile
      network: host
    expose:
      - '5173'
    stdin_open: true
    networks:
      - dataverse
    depends_on:
      - dev_dataverse
    environment:
      - VITE_DATAVERSE_BACKEND_URL=http://localhost:8000
    volumes:
      - ../:/usr/src/app
      - ../dev-env/vite.config.ts:/usr/src/app/vite.config.ts
      - /usr/src/app/dev-env
      - /usr/src/app/node_modules

  dev_dataverse:
    container_name: 'dev_dataverse'
    hostname: dataverse
    image: ${REGISTRY}/gdcc/dataverse:${DATAVERSE_IMAGE_TAG}
    restart: on-failure
    user: payara
    environment:
      dataverse_files_storage__driver__id: s3
      DATAVERSE_DB_HOST: postgres
      DATAVERSE_DB_PASSWORD: secret
      DATAVERSE_DB_USER: ${DATAVERSE_DB_USER}
      DATAVERSE_FEATURE_API_BEARER_AUTH: 1
      DATAVERSE_FEATURE_API_BEARER_AUTH_PROVIDE_MISSING_CLAIMS: 1
      DATAVERSE_FEATURE_API_BEARER_AUTH_USE_BUILTIN_USER_ON_ID_MATCH: 1
      DATAVERSE_AUTH_OIDC_ENABLED: 1
      DATAVERSE_AUTH_OIDC_CLIENT_ID: test
      DATAVERSE_AUTH_OIDC_CLIENT_SECRET: 94XHrfNRwXsjqTqApRrwWmhDLDHpIYV8
      DATAVERSE_AUTH_OIDC_AUTH_SERVER_URL: http://keycloak.mydomain.com:9080/realms/test
      JVM_ARGS: -Ddataverse.pid.providers=fake
        -Ddataverse.pid.default-provider=fake
        -Ddataverse.pid.fake.type=FAKE
        -Ddataverse.pid.fake.label=FakeDOIProvider
        -Ddataverse.pid.fake.authority=10.5072
        -Ddataverse.pid.fake.shoulder=FK2/
        -Ddataverse.files.s3.access-key=${S3_ACCESS_KEY}
        -Ddataverse.files.s3.label=s3
        -Ddataverse.files.s3.secret-key=${S3_SECRET_KEY}
        -Ddataverse.files.storage-driver-id=s3
        -Ddataverse.files.s3.type=s3
        -Ddataverse.files.s3.bucket-name=beta-dataverse-direct
        -Ddataverse.files.s3.upload-redirect=true
        -Ddataverse.files.s3.download-redirect=true
        -Ddataverse.files.s3.ingestsizelimit=50000000
        -Ddataverse.files.s3.url-expiration-minutes=60
        -Ddataverse.files.s3.connection-pool-size=2048
        -Ddataverse.files.s3.custom-endpoint-region=us-east-1
        -Ddataverse.files.s3.custom-endpoint-url=https://s3.us-east-1.amazonaws.com
    # We publish the port on the host machine instead of just exposing it within the network, so that the browser can access the URLs of images generated by Dataverse (http://localhost:8080...). 
    # This is necessary because the dev_nginx proxy is placed on top of the Dataverse service, making those URLs unreachable unless this port is exposed. 
    # This workaround is only necessary and intended for the local dev environment and will not be used in the remote environment, where we use a production DNS.
    ports:
      - '8080:8080'
    networks:
      - dataverse
    depends_on:
      - dev_postgres
      - dev_solr
    volumes:
      - ./docker-dev-volumes/app/data:/dv
      - ./docker-dev-volumes/app/secrets:/secrets
    tmpfs:
      - /dumps:mode=770,size=2052M,uid=1000,gid=1000
      - /tmp:mode=770,size=2052M,uid=1000,gid=1000
    mem_limit: 2147483648 # 2 GiB
    mem_reservation: 1024m
    privileged: false

  dv_initializer:
    container_name: 'dv_initializer'
    image: gdcc/configbaker:unstable
    restart: 'no'
    command:
      - sh
      - -c
      - 'fix-fs-perms.sh dv'
    volumes:
      - ./docker-dev-volumes/app/data:/dv

  dev_dataverse_bootstrap:
    container_name: 'dev_dataverse_bootstrap'
    image: gdcc/configbaker:unstable
    restart: 'no'
    environment:
      - TIMEOUT=${DATAVERSE_BOOTSTRAP_TIMEOUT}
    command:
      - bootstrap.sh
      - dev
    networks:
      - dataverse

  dev_postgres:
    container_name: 'dev_postgres'
    hostname: postgres
    image: postgres:${POSTGRES_VERSION}
    restart: on-failure
    environment:
      - POSTGRES_USER=${DATAVERSE_DB_USER}
      - POSTGRES_PASSWORD=secret
    expose:
      - '5432'
    ports:
        - '5432:5432'
    networks:
      - dataverse
    volumes:
      - ./docker-dev-volumes/postgresql/data:/var/lib/postgresql/data

  dev_solr_initializer:
    container_name: 'dev_solr_initializer'
    image: gdcc/configbaker:unstable
    restart: 'no'
    command:
      - sh
      - -c
      - 'fix-fs-perms.sh solr && cp -a /template/* /solr-template'
    volumes:
      - ./docker-dev-volumes/solr/data:/var/solr
      - ./docker-dev-volumes/solr/conf:/solr-template

  dev_solr:
    container_name: 'dev_solr'
    hostname: 'solr'
    image: solr:${SOLR_VERSION}
    depends_on:
      dev_solr_initializer:
        condition: service_completed_successfully
    restart: on-failure
    expose:
      - '8983'
    networks:
      - dataverse
    command:
      - 'solr-precreate'
      - 'collection1'
      - '/template'
    volumes:
      - ./docker-dev-volumes/solr/data:/var/solr
      - ./docker-dev-volumes/solr/conf:/template

  dev_smtp:
    container_name: 'dev_smtp'
    hostname: 'smtp'
    image: maildev/maildev:2.0.5
    restart: on-failure
    expose:
      - '25' # smtp server
    ports:
      - '1080:1080' # web ui
    environment:
      - MAILDEV_SMTP_PORT=25
      - MAILDEV_MAIL_DIRECTORY=/mail
    networks:
      - dataverse
    #volumes:
    #  - ./docker-dev-volumes/smtp/data:/mail
    tmpfs:
      - /mail:mode=770,size=128M,uid=1000,gid=1000

  dev_keycloak:
    container_name: "dev_keycloak"
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    image: gdcc/keycloak
    hostname: keycloak
    environment:
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_PORT=9080
      - KC_HOSTNAME_BACKCHANNEL_DYNAMIC=true
      - KC_HOSTNAME=http://localhost:8000
      - KC_HOSTNAME_ADMIN_URL=http://localhost:8000
      - KEYCLOAK_ADMIN=kcadmin
      - KEYCLOAK_ADMIN_PASSWORD=kcpassword
      - KEYCLOAK_LOGLEVEL=DEBUG
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/dataverse
      - KC_DB_USERNAME=${DATAVERSE_DB_USER}
      - KC_DB_PASSWORD=secret
      - DATAVERSE_DB_HOST=postgres
      - DATAVERSE_DB_PORT=5432
      - DATAVERSE_DB_USER=${DATAVERSE_DB_USER}
      - DATAVERSE_DB_PASSWORD=secret
      - DATAVERSE_BASE_URL=http://dataverse:8080
    networks:
      dataverse:
        aliases:
          - keycloak.mydomain.com
    command: start-dev --import-realm
    expose:
      - '9000'
      - '9080'

  dev_keycloak_initializer:
    image: alpine:latest
    container_name: "dev_keycloak_initializer"
    depends_on:
      - dev_keycloak
    environment:
      - KEYCLOAK_ADMIN=kcadmin
      - KEYCLOAK_ADMIN_PASSWORD=kcpassword
    volumes:
      - ./keycloak/setup-spi.sh:/usr/local/bin/setup-spi.sh
    command: [ "/bin/sh", "-c", "apk add --no-cache curl jq && /usr/local/bin/setup-spi.sh" ]
    networks:
      - dataverse

networks:
  dataverse:
    driver: bridge
