# see: https://github.com/oauth2-proxy/oauth2-proxy/blob/master/contrib/local-environment/docker-compose-keycloak.yaml
# This docker-compose file can be used to bring up an example instance of oauth2-proxy
# for manual testing and exploration of features.
# Alongside OAuth2-Proxy, this file also starts Keycloak to act as the identity provider,
# dvproxy as an example upstream.
#
# This can either be created using docker-compose
#    docker-compose -f docker-compose-keycloak.yaml <command>
# Or:
#    make keycloak-<command> (eg. make keycloak-up, make keycloak-down)
#
# Access public SPA http://dataverse-public.localtest.me:9000/
# Access public API http://dataverse-public.localtest.me:9000/api/v1/users/:me
# click on "Log In" and login with user=admin@example.com, password=password, or use:
# Access authenticated SPA http://oauth2-proxy.localtest.me:4180/ to initiate a login cycle using user=admin@example.com, password=password
# Access authenticated API http://oauth2-proxy.localtest.me:4180/api/v1/users/:me to initiate a login cycle using user=admin@example.com, password=password
# Access http://keycloak.localtest.me:9080 with the same credentials to check out the settings
services:

# secured access

  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    command: --config /oauth2-proxy.cfg
    hostname: oauth2-proxy
    volumes:
      - "./oauth2-proxy-keycloak.cfg:/oauth2-proxy.cfg"
    restart: unless-stopped
    ports:
      - 4180:4180/tcp
    networks:
      keycloak: {}
      dataverse: {}
      oauth2-proxy: {}
    depends_on:
      - dataverse
      - keycloak

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:25.0
    hostname: keycloak
    command:
      - 'start-dev'
      - '--http-port=9080'
      - '--import-realm'
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    environment:
      KC_HTTP_PORT: 9080
      KEYCLOAK_ADMIN: admin@example.com
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - 9080:9080/tcp
    networks:
      keycloak:
        aliases:
          - keycloak.localtest.me

  dataverse:
    container_name: 'dataverse'
    hostname: dataverse
    build:
      context: ../
      dockerfile: ./dev-authn-env/frontend/Dockerfile
      network: host
      args:
        CONFIG: authn
    networks:
      dataverse:
        aliases:
          - dataverse.localtest.me
    depends_on:
      - dvproxy

  dvproxy:
    container_name: 'dvproxy'
    hostname: dvproxy
    build:
      context: ./dvproxy
      dockerfile: ./Dockerfile
      network: host
    restart: on-failure
    environment:
      DATAVERSE_SERVER: ${DATAVERSE_SERVER}
      API_KEY: ${API_KEY}
      UNBLOCK_KEY: ${UNBLOCK_KEY}
      USER_HEADER: ${USER_HEADER}
    networks:
      - dataverse
    privileged: false

# public access

  dvproxy-public:
    container_name: 'dvproxy-public'
    hostname: dvproxy-public
    build:
      context: ./dvproxy
      dockerfile: ./Dockerfile
      network: host
    restart: on-failure
    environment:
      DATAVERSE_SERVER: ${DATAVERSE_SERVER}
    networks:
      - dataverse
    privileged: false

  dataverse-public:
    container_name: 'dataverse-public'
    hostname: dataverse-public
    build:
      context: ../
      dockerfile: ./dev-authn-env/frontend/Dockerfile
      network: host
      args:
        CONFIG: public
    ports:
      - '9000:80'
    networks:
      dataverse:
        aliases:
          - dataverse-public.localtest.me
    depends_on:
      - dvproxy-public

networks:
  dataverse:
    driver: bridge
  keycloak: {}
  oauth2-proxy: {}
