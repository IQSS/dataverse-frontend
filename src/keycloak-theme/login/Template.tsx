import { useEffect } from 'react'
import { kcSanitize } from 'keycloakify/lib/kcSanitize'
import type { TemplateProps } from 'keycloakify/login/TemplateProps'
import { getKcClsx } from 'keycloakify/login/lib/kcClsx'
import { useSetClassName } from 'keycloakify/tools/useSetClassName'
import { useInitialize } from 'keycloakify/login/Template.useInitialize'
import type { I18n } from './i18n'
import type { KcContext } from './KcContext'
import { Alert, DropdownButton, DropdownButtonItem, Tooltip } from '@iqss/dataverse-design-system'
import { ArrowUpRightSquareFill } from 'react-bootstrap-icons'
import styles from './template.module.scss'

/*
 This is a Layout common to every page. It was originally generated by running `npx keycloakify eject-page` and then selecting `Template.tsx` option.
*/

export default function Template(props: TemplateProps<KcContext, I18n>) {
  const {
    displayInfo = false,
    displayMessage = true,
    displayRequiredFields = false,
    headerNode,
    socialProvidersNode = null,
    infoNode = null,
    documentTitle,
    bodyClassName,
    kcContext,
    i18n,
    doUseDefaultCss,
    classes,
    children
  } = props

  const { kcClsx } = getKcClsx({ doUseDefaultCss, classes })

  const { msg, msgStr, currentLanguage, enabledLanguages } = i18n

  const { realm, auth, url, message, isAppInitiatedAction } = kcContext

  useEffect(() => {
    document.title = documentTitle ?? msgStr('loginTitle', kcContext.realm.displayName)
  }, [])

  useSetClassName({
    qualifiedName: 'html',
    className: kcClsx('kcHtmlClass')
  })

  useSetClassName({
    qualifiedName: 'body',
    className: bodyClassName ?? kcClsx('kcBodyClass')
  })

  const { isReadyToRender } = useInitialize({ kcContext, doUseDefaultCss })

  if (!isReadyToRender) {
    return null
  }

  return (
    <div className={styles.login}>
      <div id="kc-header">
        <div id="kc-header-wrapper" className={styles['display-name']}>
          {msg('loginTitleHtml', realm.displayNameHtml)}
        </div>
      </div>
      <div className={styles['login-card']}>
        <header>
          {enabledLanguages.length > 1 && (
            <div className={styles['language-dropdown']}>
              <DropdownButton
                title={currentLanguage.label}
                ariaLabel={msgStr('languages')}
                id="kc-locale-dropdown"
                variant="secondary">
                {enabledLanguages.map(({ languageTag, label, href }, i) => (
                  <DropdownButtonItem id={`language-${i + 1}`} href={href} key={languageTag}>
                    {label}
                  </DropdownButtonItem>
                ))}
              </DropdownButton>
            </div>
          )}
          {(() => {
            const node = !(
              auth !== undefined &&
              auth.showUsername &&
              !auth.showResetCredentials
            ) ? (
              <h1 id="kc-page-title" className={styles['page-title']}>
                {headerNode}
              </h1>
            ) : (
              <div id="kc-username" className={styles['inmutable-username']}>
                <label id="kc-attempted-username">{auth.attemptedUsername}</label>
                <Tooltip placement="right" overlay={msg('restartLoginTooltip')}>
                  <a
                    id="reset-login"
                    href={url.loginRestartFlowUrl}
                    aria-label={msgStr('restartLoginTooltip')}>
                    <ArrowUpRightSquareFill size={16} />
                  </a>
                </Tooltip>
              </div>
            )

            if (displayRequiredFields) {
              return (
                <div>
                  <div className={styles['required-fields']}>
                    <span className={styles.text}>
                      <span className={styles.symbol}>*</span>
                      {msg('requiredFields')}
                    </span>
                  </div>
                  <div>{node}</div>
                </div>
              )
            }

            return node
          })()}
        </header>
        <div id="kc-content">
          <div id="kc-content-wrapper" className={styles['content-wrapper']}>
            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}
            {displayMessage &&
              message !== undefined &&
              (message.type !== 'warning' || !isAppInitiatedAction) && (
                <Alert
                  variant={
                    message.type === 'success'
                      ? 'success'
                      : message.type === 'warning'
                      ? 'warning'
                      : message.type === 'error'
                      ? 'danger'
                      : message.type === 'info'
                      ? 'info'
                      : 'info'
                  }
                  dismissible={false}>
                  <span
                    dangerouslySetInnerHTML={{
                      __html: kcSanitize(message.summary)
                    }}
                  />
                </Alert>
              )}
            {children}
            {auth !== undefined && auth.showTryAnotherWayLink && (
              <form id="kc-select-try-another-way-form" action={url.loginAction} method="post">
                <div className={styles['try-another-way']}>
                  <input type="hidden" name="tryAnotherWay" value="on" />
                  <a
                    href="#"
                    id="try-another-way"
                    onClick={() => {
                      document.forms['kc-select-try-another-way-form' as never].submit()
                      return false
                    }}>
                    {msg('doTryAnotherWay')}
                  </a>
                </div>
              </form>
            )}
            {socialProvidersNode}
            {displayInfo && (
              <div id="kc-info">
                <div id="kc-info-wrapper">{infoNode}</div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
